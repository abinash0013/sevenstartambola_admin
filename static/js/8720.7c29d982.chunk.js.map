{"version":3,"file":"static/js/8720.7c29d982.chunk.js","mappings":"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","sources":["constants/Data.constant.js","services/Ops.js","services/AppSetting.js","views/disclaimer/Disclaimer.js"],"sourcesContent":["// const mainUrl = `http://localhost:8000/`\r\nconst mainUrl = `https://api.sevenstartambola.com/`\r\nconst base = {\r\n    adminLogin: mainUrl + `adminLogin`,\r\n    saveAgent: mainUrl + `saveAgent`,\r\n    agentsList: mainUrl + `agentsList`,\r\n    editAgent: mainUrl + `editAgent`,\r\n    deleteAgent: mainUrl + `deleteAgent`,\r\n    saveUser: mainUrl + `saveUser`,\r\n    usersList: mainUrl + `usersList`,\r\n    editUser: mainUrl + `editUser`,\r\n    deleteUser: mainUrl + `deleteUser`,\r\n    // saveTicket: mainUrl + `saveTicket`,\r\n    // ticketList: mainUrl + `ticketList`,\r\n    // editTicket: mainUrl + `editTicket`,\r\n    // deleteTicket: mainUrl + `deleteTicket`,\r\n    ticketCardView: mainUrl + `ticketCardView`,\r\n    gameList: mainUrl + `gameList`,\r\n    saveGame: mainUrl + `saveGame`,\r\n    editGame: mainUrl + `editGame`,\r\n    saveAnnouncement: mainUrl + `saveAnnouncement`,\r\n    announcementList: mainUrl + `announcementList`,\r\n    editAnnouncement: mainUrl + `editAnnouncement`,\r\n    deleteAnnouncement: mainUrl + `deleteAnnouncement`,\r\n    disclaimerList: mainUrl + `disclaimerList`,\r\n    editDisclaimer: mainUrl + `editDisclaimer`,\r\n};\r\nexport { base };","import axios from \"axios\";\r\n\r\nconst postData = async (url = \"\", data, token = false) => {\r\n    // console.log(\"url\",url)\r\n    let tokenData = \"\";\r\n    if (token) {\r\n        tokenData = \"Bearer \" + token;\r\n    }\r\n    var header = { headers: { Authorization: tokenData } };\r\n    let response = await axios.post(url, data, header);\r\n    // let response = await axios.post(url, data, { headers:  { \"Authorization\": tokenData }});\r\n    return response.data;\r\n};\r\nconst postDataContent = async (url = \"\", data, token = false, contentType) => {\r\n    let tokenData = \"\";\r\n    if (token) {\r\n        tokenData = \"Bearer \" + token;\r\n    }\r\n    // console.log('contentType', contentType)\r\n    let response = await axios.post(url, data, {\r\n        headers: { Authorization: tokenData, \"content-type\": contentType },\r\n    });\r\n    return response.data;\r\n};\r\nconst putData = async (url = \"\", data, token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    let response = await axios.put(url, data, {\r\n        headers: { Authorization: token },\r\n    });\r\n    return response.data;\r\n};\r\nconst getData = async (url = \"\", token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    var header = { headers: { Authorization: token } };\r\n    let response = await axios.get(url, header);\r\n    return response.data;\r\n};\r\nconst deleteData = async (url = \"\", token = false) => {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    let response = await axios.delete(url, {\r\n        headers: { Authorization: token },\r\n    });\r\n    return response.data;\r\n};\r\nexport async function downloadFile(fileUrl, data, token = false) {\r\n    if (token) {\r\n        token = \"Bearer \" + token;\r\n    }\r\n    axios\r\n        .post(fileUrl, data, {\r\n            responseType: \"blob\",\r\n            headers: { Authorization: token },\r\n        })\r\n        .then(function (response) {\r\n            const type = response.headers[\"content-type\"];\r\n            const blob = new Blob([response.data], {\r\n                type: type,\r\n                encoding: \"UTF-8\",\r\n            });\r\n            const link = document.createElement(\"a\");\r\n            link.href = window.URL.createObjectURL(blob);\r\n            link.download = data.fileName;\r\n            link.click();\r\n        });\r\n}\r\n\r\nexport { postData, getData, deleteData, putData, postDataContent };\r\n","import { base } from \"src/constants/Data.constant\";\r\nimport * as opsService from \"./Ops\";\r\n\r\nconst postApiCall = async (url, request) => {\r\n    let token = localStorage.getItem(\"token\");\r\n    try {\r\n        let result = await opsService.postData(\r\n            url,\r\n            request,\r\n            token\r\n        );\r\n        // console.log(\"resultPostdata\", result);\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n}, putApiCall = async (url, request) => {\r\n    let token = localStorage.getItem(\"token\");\r\n\r\n    try {\r\n        let result = await opsService.putData(\r\n            url,\r\n            request,\r\n            token\r\n        );\r\n        // console.log(\"resultPostdata\", result);\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n}, getApiCall = async (url) => {\r\n    try {\r\n        let result = await opsService.getData(\r\n            url,\r\n            false\r\n        );\r\n        return result;\r\n    } catch (e) {\r\n        return { status: false, data: {}, message: e.message };\r\n    }\r\n};\r\nexport { postApiCall, getApiCall, putApiCall };\r\n","import React, { useEffect, useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CFormTextarea,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableCaption,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\nimport { getApiCall, postApiCall, putApiCall } from 'src/services/AppSetting';\r\nimport { base } from 'src/constants/Data.constant';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Disclaimer = () => {\r\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\r\n  const [itemValue, setItemValue] = useState(\"\");\r\n  const [editModalVisible, setEditModalVisible] = useState(false);\r\n  const [disclaimerData, setDisclaimerData] = useState([]);\r\n  const [visible, setVisible] = useState(false)\r\n  const [disclaimerId, setDisclaimerId] = useState(\"\");\r\n  const [disclaimerTitle, setDisclaimerTitle] = useState(\"\");\r\n  const [disclaimerMessage, setDisclaimerMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    disclaimer_list();\r\n  }, []);\r\n\r\n  const disclaimer_list = async () => {\r\n    let result = await getApiCall(base.disclaimerList)\r\n    console.log(\"resultresultresult\", result);\r\n    setDisclaimerData(result)\r\n  }\r\n\r\n  const get_edit_value = async (item) => {\r\n    console.log(\"itemmm\", item);\r\n    setEditModalVisible(true)\r\n    setDisclaimerId(item.disclaimer_id)\r\n    setDisclaimerTitle(item.disclaimer_title)\r\n    setDisclaimerMessage(item.disclaimer_message)\r\n  }\r\n\r\n  const edit_disclaimer = async () => {\r\n    if (disclaimerTitle == \"\") {\r\n      toast.error(\"Disclaimer Title is Mandatory\")\r\n    } else if (disclaimerMessage == \"\") {\r\n      toast.error(\"Disclaimer Message is Mandatory\")\r\n    } else {\r\n      let req = {\r\n        disclaimerId: disclaimerId,\r\n        disclaimerTitle: disclaimerTitle,\r\n        disclaimerMessage: disclaimerMessage,\r\n      }\r\n      console.log(\"reqreq\", req);\r\n      let result = await putApiCall(base.editDisclaimer, req)\r\n      console.log(\"resultresult\", result);\r\n      if (result.code == 200) {\r\n        setEditModalVisible(false)\r\n        disclaimer_list();\r\n        toast.success(\"Updated Successfully..!\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol xs={12} className='mb-4'>\r\n        <ToastContainer />\r\n        {/* <CButton color=\"primary\" onClick={() => { setVisible(true) }} onClose={() => setVisible(false)}>Add</CButton>\r\n        <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\r\n          <CModalHeader>\r\n            <CModalTitle>Add</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody>\r\n            <CForm>\r\n              <div className=\"mb-3\">\r\n                <CFormLabel htmlFor=\"disclaimerTitle\">Disclaimer Title</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"disclaimerTitle\"\r\n                  placeholder=\"Disclaimer Title\"\r\n                  onChange={(e) => { setDisclaimerTitle(e) }}\r\n                />\r\n                <CFormLabel htmlFor=\"disclaimerMessage\">Disclaimer Message</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"disclaimerMessage\"\r\n                  placeholder=\"Disclaimer Message\"\r\n                  onChange={(e) => { setDisclaimerMessage(e) }}\r\n                />\r\n              </div>\r\n            </CForm>\r\n          </CModalBody>\r\n          <CModalFooter>\r\n            <CButton color=\"secondary\" onClick={() => setEditModalVisible(false)}>\r\n              Cancel\r\n            </CButton>\r\n            <CButton color=\"primary\" onClick={() => save_disclaimer()}>Save</CButton>\r\n          </CModalFooter>\r\n        </CModal> */}\r\n      </CCol>\r\n      <CCol xs={12}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardBody>\r\n            <CTable hover responsive>\r\n              <CTableHead>\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Message</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n                {disclaimerData.map((item, index) => {\r\n                  console.log(\"agentlistitemmmm\", item);\r\n                  return <CTableRow key={index}>\r\n                    <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\r\n                    <CTableDataCell>{item.disclaimer_title}</CTableDataCell>\r\n                    <CTableDataCell>{item.disclaimer_message}</CTableDataCell>\r\n                    <CTableDataCell>\r\n                      <CButton color=\"warning\" className='me-2' onClick={() => { get_edit_value(item) }}>Edit</CButton>\r\n                      <CModal alignment=\"center\" visible={editModalVisible}>\r\n                        <CModalHeader>\r\n                          <CModalTitle>Edit</CModalTitle>\r\n                        </CModalHeader>\r\n                        <CModalBody>\r\n                          <CForm>\r\n                            <div className=\"mb-3\">\r\n                              <CFormLabel htmlFor=\"Disclaimer Title\">Disclaimer Title</CFormLabel>\r\n                              <CFormInput\r\n                                type=\"text\"\r\n                                id=\"disclaimerTitle\"\r\n                                placeholder=\"Disclaimer Title\"\r\n                                onChange={(e) => { setDisclaimerTitle(e.target.value) }}\r\n                                // name={name}\r\n                                defaultValue={disclaimerTitle}\r\n                              />\r\n                              <CFormLabel htmlFor=\"email\">Disclaimer Message</CFormLabel>\r\n                              <CFormInput\r\n                                type=\"text\"\r\n                                id=\"disclaimerMessage\"\r\n                                placeholder=\"Disclaimer Message\"\r\n                                onChange={(e) => { setDisclaimerMessage(e) }}\r\n                                defaultValue={disclaimerMessage}\r\n                              />\r\n                            </div>\r\n                          </CForm>\r\n                        </CModalBody>\r\n                        <CModalFooter>\r\n                          <CButton color=\"secondary\" onClick={() => setEditModalVisible(false)}>\r\n                            Cancel\r\n                          </CButton>\r\n                          <CButton color=\"primary\" onClick={() => edit_disclaimer()}>Update</CButton>\r\n                        </CModalFooter>\r\n                      </CModal>\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                })}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow >\r\n  )\r\n}\r\n\r\nexport default Disclaimer"],"names":["mainUrl","base","adminLogin","saveAgent","agentsList","editAgent","deleteAgent","saveUser","usersList","editUser","deleteUser","ticketCardView","gameList","saveGame","editGame","saveAnnouncement","announcementList","editAnnouncement","deleteAnnouncement","disclaimerList","editDisclaimer","postData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","data","token","tokenData","header","response","_args","arguments","wrap","_context","prev","next","length","undefined","headers","Authorization","axios","post","sent","abrupt","stop","apply","putData","_ref3","_callee3","_args3","_context3","put","getData","_ref4","_callee4","_args4","_context4","get","postApiCall","request","result","localStorage","getItem","opsService","t0","status","message","_x","_x2","putApiCall","_ref2","_callee2","_context2","_x3","_x4","getApiCall","_x5","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","editModalVisible","setEditModalVisible","_useState7","_useState8","disclaimerData","setDisclaimerData","_useState9","_useState10","_useState11","_useState12","disclaimerId","setDisclaimerId","_useState13","_useState14","disclaimerTitle","setDisclaimerTitle","_useState15","_useState16","disclaimerMessage","setDisclaimerMessage","useEffect","disclaimer_list","console","log","get_edit_value","item","disclaimer_id","disclaimer_title","disclaimer_message","edit_disclaimer","req","toast","error","code","success","_jsxs","CRow","children","_jsx","CCol","xs","className","ToastContainer","CCard","CCardBody","CTable","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","index","CTableDataCell","CButton","color","onClick","CModal","alignment","visible","CModalHeader","CModalTitle","CModalBody","CForm","CFormLabel","htmlFor","CFormInput","type","id","placeholder","onChange","e","target","value","defaultValue","CModalFooter"],"sourceRoot":""}